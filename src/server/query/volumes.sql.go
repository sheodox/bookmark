// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: volumes.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const addVolume = `-- name: AddVolume :one
insert into volumes
(series_id, name, created_at, user_id)
values ($1, $2, $3, $4)
returning id, series_id, name, notes, current_page, created_at, user_id, status
`

type AddVolumeParams struct {
	SeriesID  int32
	Name      string
	CreatedAt time.Time
	UserID    int32
}

func (q *Queries) AddVolume(ctx context.Context, arg AddVolumeParams) (Volume, error) {
	row := q.db.QueryRowContext(ctx, addVolume,
		arg.SeriesID,
		arg.Name,
		arg.CreatedAt,
		arg.UserID,
	)
	var i Volume
	err := row.Scan(
		&i.ID,
		&i.SeriesID,
		&i.Name,
		&i.Notes,
		&i.CurrentPage,
		&i.CreatedAt,
		&i.UserID,
		&i.Status,
	)
	return i, err
}

const deleteVolume = `-- name: DeleteVolume :exec
delete from volumes where id = $1 and user_id = $2
`

type DeleteVolumeParams struct {
	VolumeID int32
	UserID   int32
}

func (q *Queries) DeleteVolume(ctx context.Context, arg DeleteVolumeParams) error {
	_, err := q.db.ExecContext(ctx, deleteVolume, arg.VolumeID, arg.UserID)
	return err
}

const getVolume = `-- name: GetVolume :one
select volumes.id, volumes.series_id, volumes.name, volumes.notes, volumes.current_page, volumes.created_at, volumes.user_id, volumes.status, series.name as series_name
from volumes
inner join series on volumes.series_id = series.id
where volumes.user_id = $1 and volumes.id = $2
`

type GetVolumeParams struct {
	UserID   int32
	VolumeID int32
}

type GetVolumeRow struct {
	ID          int32
	SeriesID    int32
	Name        string
	Notes       string
	CurrentPage int32
	CreatedAt   time.Time
	UserID      int32
	Status      string
	SeriesName  string
}

func (q *Queries) GetVolume(ctx context.Context, arg GetVolumeParams) (GetVolumeRow, error) {
	row := q.db.QueryRowContext(ctx, getVolume, arg.UserID, arg.VolumeID)
	var i GetVolumeRow
	err := row.Scan(
		&i.ID,
		&i.SeriesID,
		&i.Name,
		&i.Notes,
		&i.CurrentPage,
		&i.CreatedAt,
		&i.UserID,
		&i.Status,
		&i.SeriesName,
	)
	return i, err
}

const listVolumes = `-- name: ListVolumes :many
with vols as (
	select volumes.id, volumes.series_id, volumes.name, volumes.notes, volumes.current_page, volumes.created_at, volumes.user_id, volumes.status, series.name as series_name
	from volumes
	inner join series on volumes.series_id = series.id
	where volumes.user_id = $1 
	and volumes.status = coalesce($2, volumes.status)
	and volumes.name like coalesce($3, volumes.name)
	and series_id = coalesce($4, volumes.series_id) 
	order by name asc
),
paged as (
	select vols.id, vols.series_id, vols.name, vols.notes, vols.current_page, vols.created_at, vols.user_id, vols.status, vols.series_name
	from vols
	limit $6
	offset $5
)
select paged.id, paged.series_id, paged.name, paged.notes, paged.current_page, paged.created_at, paged.user_id, paged.status, paged.series_name, (select count(vols.id) from vols) as total_results
from paged
`

type ListVolumesParams struct {
	UserID     int32
	Status     sql.NullString
	Name       sql.NullString
	SeriesID   sql.NullInt32
	PageOffset int32
	PageSize   int32
}

type ListVolumesRow struct {
	ID           int32
	SeriesID     int32
	Name         string
	Notes        string
	CurrentPage  int32
	CreatedAt    time.Time
	UserID       int32
	Status       string
	SeriesName   string
	TotalResults int64
}

func (q *Queries) ListVolumes(ctx context.Context, arg ListVolumesParams) ([]ListVolumesRow, error) {
	rows, err := q.db.QueryContext(ctx, listVolumes,
		arg.UserID,
		arg.Status,
		arg.Name,
		arg.SeriesID,
		arg.PageOffset,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListVolumesRow
	for rows.Next() {
		var i ListVolumesRow
		if err := rows.Scan(
			&i.ID,
			&i.SeriesID,
			&i.Name,
			&i.Notes,
			&i.CurrentPage,
			&i.CreatedAt,
			&i.UserID,
			&i.Status,
			&i.SeriesName,
			&i.TotalResults,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVolume = `-- name: UpdateVolume :exec
update volumes
set notes = $1, current_page = $2, name = $3, status = $4
where id = $5 and user_id = $6
`

type UpdateVolumeParams struct {
	Notes       string
	CurrentPage int32
	Name        string
	Status      string
	VolumeID    int32
	UserID      int32
}

func (q *Queries) UpdateVolume(ctx context.Context, arg UpdateVolumeParams) error {
	_, err := q.db.ExecContext(ctx, updateVolume,
		arg.Notes,
		arg.CurrentPage,
		arg.Name,
		arg.Status,
		arg.VolumeID,
		arg.UserID,
	)
	return err
}
