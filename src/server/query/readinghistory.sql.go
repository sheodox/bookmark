// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: readinghistory.sql

package query

import (
	"context"
	"time"
)

const addReadingHistory = `-- name: AddReadingHistory :exec
insert into reading_history
(volume_id, current_page, created_at, user_id, pages_read)
values ($1, $2, $3, $4, $5)
`

type AddReadingHistoryParams struct {
	VolumeID    int32
	CurrentPage int32
	CreatedAt   time.Time
	UserID      int32
	PagesRead   int32
}

func (q *Queries) AddReadingHistory(ctx context.Context, arg AddReadingHistoryParams) error {
	_, err := q.db.ExecContext(ctx, addReadingHistory,
		arg.VolumeID,
		arg.CurrentPage,
		arg.CreatedAt,
		arg.UserID,
		arg.PagesRead,
	)
	return err
}

const deleteReadingHistory = `-- name: DeleteReadingHistory :exec
delete from reading_history
where id = $1 and user_id = $2
`

type DeleteReadingHistoryParams struct {
	ReadingHistoryID int32
	UserID           int32
}

func (q *Queries) DeleteReadingHistory(ctx context.Context, arg DeleteReadingHistoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteReadingHistory, arg.ReadingHistoryID, arg.UserID)
	return err
}

const listReadingHistory = `-- name: ListReadingHistory :many
select id, volume_id, current_page, created_at, user_id, pages_read
from reading_history
where volume_id = $1 and user_id = $2
order by created_at desc
`

type ListReadingHistoryParams struct {
	VolumeID int32
	UserID   int32
}

func (q *Queries) ListReadingHistory(ctx context.Context, arg ListReadingHistoryParams) ([]ReadingHistory, error) {
	rows, err := q.db.QueryContext(ctx, listReadingHistory, arg.VolumeID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadingHistory
	for rows.Next() {
		var i ReadingHistory
		if err := rows.Scan(
			&i.ID,
			&i.VolumeID,
			&i.CurrentPage,
			&i.CreatedAt,
			&i.UserID,
			&i.PagesRead,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
